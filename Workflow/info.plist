<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.cobaltforge.alfred.bluescope</string>
	<key>connections</key>
	<dict>
		<key>07e33e1a-cb82-4c48-b49e-ebb187e73740</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>c7ac31c0-fbac-4b81-92b0-dd0317d335ce</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>f4d59091-1db2-42c7-a68f-27114f744bdc</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>284551ae-04d3-467a-b60f-d750e252f7d5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>07e33e1a-cb82-4c48-b49e-ebb187e73740</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>027795b1-6b31-4f66-b7f7-c9463a6fe3d6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5f2796bf-8712-4fd7-9b7e-55457b56c1a9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9f11b779-62ab-48db-a420-deb01b32c46b</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>07e33e1a-cb82-4c48-b49e-ebb187e73740</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Arca Artem</string>
	<key>description</key>
	<string>Discover, connect, and manage Bluetooth devices with ease</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>BlueScope</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>readonly address="${1}"

[[ "${connected}" == '1' ]] &amp;&amp; blueutil --disconnect "${address}" --wait-disconnect "${address}" || blueutil --connect "${address}" --wait-connect "${address}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>11</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>9f11b779-62ab-48db-a420-deb01b32c46b</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>{var:device_toggle_keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Gathering device information…</string>
				<key>script</key>
				<string>// Utilities
function runCommand(...args) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/env")
  task.arguments = args
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const data = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const output = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding).js

  return { stdout: output, exitCode: task.terminationStatus }
}

function createError(title, subtitle) {
  return JSON.stringify({
    items: [{ title, subtitle, icon: { path: "icon_alt.png" }, valid: false }]
  })
}

function checkBlueutil() {
  const result = runCommand("which", "blueutil")
  return result.exitCode === 0 ? null : createError("blueutil not found", "Install blueutil via: brew install blueutil")
}

function run() {
  // Check if blueutil is available
  const blueUtilError = checkBlueutil()
  if (blueUtilError) return blueUtilError

  // Get paired devices
  const pairedResult = runCommand("blueutil", "--format", "json", "--paired")
  if (pairedResult.exitCode !== 0) {
    return createError("Error accessing Bluetooth", "Check Bluetooth permissions in System Settings")
  }

  let pairedDevices
  try {
    pairedDevices = JSON.parse(pairedResult.stdout)
  } catch (error) {
    return createError("Error parsing Bluetooth data", "Please try again or check blueutil installation")
  }

  if (pairedDevices.length === 0) {
    return createError("No paired devices found", "Pair a device in System Settings to get started")
  }

  const deviceCount = pairedDevices.length
  const items = pairedDevices.map(device =&gt; ({
    variables: { connected: device.connected },
    uid: device.address,
    title: device.name,
    subtitle: `${device.connected ? "Connected" : "Not Connected"} • ${deviceCount} paired device${deviceCount === 1 ? '' : 's'}`,
    arg: device.address,
    icon: { path: device.connected ? "icon.png" : "icon_alt.png" }
  }))

  return JSON.stringify({ rerun: 0.5, items })
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>skipuniversalaction</key>
				<true/>
				<key>subtext</key>
				<string>Toggle device connection status</string>
				<key>title</key>
				<string>Show Paired Bluetooth Devices</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>5f2796bf-8712-4fd7-9b7e-55457b56c1a9</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>skipqueryencode</key>
				<false/>
				<key>skipvarencode</key>
				<false/>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string>x-apple.systempreferences:com.apple.preference.security?Privacy_Bluetooth</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>c7ac31c0-fbac-4b81-92b0-dd0317d335ce</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{var:open_system_settings}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>5</integer>
						<key>matchstring</key>
						<string></string>
						<key>outputlabel</key>
						<string>Open System Settings</string>
						<key>uid</key>
						<string>f4d59091-1db2-42c7-a68f-27114f744bdc</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string></string>
				<key>hideelse</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>07e33e1a-cb82-4c48-b49e-ebb187e73740</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>{var:full_toggle_keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Gathering Bluetooth status…</string>
				<key>script</key>
				<string>// Utilities
function runCommand(...args) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/env")
  task.arguments = args
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const data = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const output = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding).js

  return { stdout: output, exitCode: task.terminationStatus }
}

function createError(title, subtitle) {
  return JSON.stringify({
    items: [{ title, subtitle, icon: { path: "icon_alt.png" }, valid: false }]
  })
}

function checkBlueutil() {
  const result = runCommand("which", "blueutil")
  return result.exitCode === 0 ? null : createError("blueutil not found", "Install blueutil via: brew install blueutil")
}

function run() {
  // Check if blueutil is available
  const blueUtilError = checkBlueutil()
  if (blueUtilError) return blueUtilError

  // Get Bluetooth power state
  const powerResult = runCommand("blueutil", "--power")
  if (powerResult.exitCode !== 0) {
    return createError("Error accessing Bluetooth", "Check Bluetooth permissions in System Settings")
  }

  const isOn = parseInt(powerResult.stdout) === 1

  return JSON.stringify({
    items: [{
      title: `Bluetooth is ${isOn ? "On" : "Off"}`,
      subtitle: `Action to turn it ${isOn ? "off" : "on"}`,
      arg: isOn ? "off" : "on",
      icon: { path: isOn ? "icon.png" : "icon_alt.png" }
    }]
  })
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>skipuniversalaction</key>
				<true/>
				<key>subtext</key>
				<string>Turn Bluetooth on or off</string>
				<key>title</key>
				<string>Toggle Bluetooth</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>284551ae-04d3-467a-b60f-d750e252f7d5</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>blueutil --power "${1}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>027795b1-6b31-4f66-b7f7-c9463a6fe3d6</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>## BlueScope - Bluetooth Device Manager

Discover, connect, and manage Bluetooth devices with ease through Alfred.

### Requirements

This workflow requires [blueutil](https://github.com/toy/blueutil) to be installed:

```bash
brew install blueutil
```

### Usage

**Device Management** - Use `btd` keyword (configurable):

![Connect or disconnect devices](images/about/btd.png)

* &lt;kbd&gt;↩&lt;/kbd&gt; Toggle device connection (connect/disconnect)
* **Visual indicators**: Color icon = connected, grayscale = disconnected

**Bluetooth Power** - Use `btt` keyword (configurable):

![Connect or disconnect Bluetooth](images/about/btt.png)

* &lt;kbd&gt;↩&lt;/kbd&gt; Turn Bluetooth on/off

### Configuration

Customize keywords in workflow settings:
- **Device Toggle Keyword** (default: `btd`)
- **Bluetooth Power Keyword** (default: `btt`)

### Troubleshooting

**"blueutil not found"** → Install via `brew install blueutil`
**"Error accessing Bluetooth"** → Grant Alfred Bluetooth permissions in System Settings
**No devices showing** → Pair devices in System Settings first

[📖 Full Documentation](https://github.com/cobalt-forge/alfred-workflow-bluescope)</string>
	<key>uidata</key>
	<dict>
		<key>027795b1-6b31-4f66-b7f7-c9463a6fe3d6</key>
		<dict>
			<key>xpos</key>
			<real>310</real>
			<key>ypos</key>
			<real>360</real>
		</dict>
		<key>07e33e1a-cb82-4c48-b49e-ebb187e73740</key>
		<dict>
			<key>xpos</key>
			<real>350</real>
			<key>ypos</key>
			<real>240</real>
		</dict>
		<key>284551ae-04d3-467a-b60f-d750e252f7d5</key>
		<dict>
			<key>xpos</key>
			<real>80</real>
			<key>ypos</key>
			<real>360</real>
		</dict>
		<key>5f2796bf-8712-4fd7-9b7e-55457b56c1a9</key>
		<dict>
			<key>xpos</key>
			<real>80</real>
			<key>ypos</key>
			<real>60</real>
		</dict>
		<key>9f11b779-62ab-48db-a420-deb01b32c46b</key>
		<dict>
			<key>xpos</key>
			<real>310</real>
			<key>ypos</key>
			<real>60</real>
		</dict>
		<key>c7ac31c0-fbac-4b81-92b0-dd0317d335ce</key>
		<dict>
			<key>xpos</key>
			<real>475</real>
			<key>ypos</key>
			<real>210</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>btd</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Device Toggle Keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>device_toggle_keyword</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>btt</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Bluetooth Power Keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>full_toggle_keyword</string>
		</dict>
	</array>
	<key>variables</key>
	<dict>
		<key>BLUEUTIL_USE_SYSTEM_PROFILER</key>
		<string>1</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/cobalt-forge/alfred-workflow-bluescope</string>
</dict>
</plist>
